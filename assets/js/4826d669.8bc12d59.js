"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9529],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),u=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),d=s,f=c["".concat(i,".").concat(d)]||c[d]||m[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:s,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var r=n(7462),s=(n(7294),n(4137));const a={title:"\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e unittest python",description:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e unittest \u0432 \u043f\u0438\u0442\u043e\u043d\u0435",sidebar_label:"Unittest \u043f\u0440\u0438\u043c\u0435\u0440\u044b",tags:["triks"],categories:["python"],last_update:{date:new Date("2023-06-20T00:00:00.000Z"),author:"stavis"}},o=void 0,l={unversionedId:"python/unittests",id:"python/unittests",title:"\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e unittest python",description:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e unittest \u0432 \u043f\u0438\u0442\u043e\u043d\u0435",source:"@site/docs/python/unittests.md",sourceDirName:"python",slug:"/python/unittests",permalink:"/python/unittests",draft:!1,editUrl:"https://github.com/stavis-dev/stavis-dev.github.io/tree/main/docs/python/unittests.md",tags:[{label:"triks",permalink:"/tags/triks"}],version:"current",lastUpdatedBy:"stavis",lastUpdatedAt:1687219200,formattedLastUpdatedAt:"20 \u0438\u044e\u043d. 2023 \u0433.",frontMatter:{title:"\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e unittest python",description:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e unittest \u0432 \u043f\u0438\u0442\u043e\u043d\u0435",sidebar_label:"Unittest \u043f\u0440\u0438\u043c\u0435\u0440\u044b",tags:["triks"],categories:["python"],last_update:{date:"2023-06-20T00:00:00.000Z",author:"stavis"}},sidebar:"pythonSidebar",previous:{title:"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438 Pyhton",permalink:"/python/save_load"}},i={},u=[{value:"Unittest",id:"unittest",level:2},{value:"\u041c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 TDD",id:"\u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430-tdd",level:2},{value:"Mock",id:"mock",level:2},{value:"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0442\u0447\u0435\u0439",id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f-\u043f\u0430\u0442\u0447\u0435\u0439",level:3},{value:"\u0421\u0441\u044b\u043b\u043a\u0438",id:"\u0441\u0441\u044b\u043b\u043a\u0438",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,s.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"\u042e\u043d\u0438\u0442\u0442\u0435\u0441\u0442\u044b \u0432 python \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u044f\u0442\u044b\u0435 \u0441\u043e \u0432\u0441\u044f\u043a\u0438\u0445 \u0444\u043e\u0440\u0443\u043c\u043e\u0432."),(0,s.kt)("h2",{id:"unittest"},"Unittest"),(0,s.kt)("p",null,"\u041e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u043e\u043d\u044f\u0442\u0438\u044f \u0432 unittest"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import unittest\n\n\ndef setUpModule():\n    """\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043f\u0435\u0440\u0435\u0434 \u0432\u0441\u0435\u043c\u0438 \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435."""\n    print(\'> setUpModule\')\n\n\ndef tearDownModule():\n    """\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043f\u043e\u0441\u043b\u0435 \u0432\u0441\u0435\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0441\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435."""\n    print(\'> tearDownModule\')\n\n\nclass TestExample(unittest.TestCase):\n    """\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u043f\u0440\u0438\u043d\u0446\u0438\u043f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0435\u0441\u0442\u043e\u0432."""\n\n    @classmethod\n    def setUpClass(cls):\n        """\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430."""\n        print(\'>> setUpClass\')\n\n    @classmethod\n    def tearDownClass(cls):\n        """\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u043f\u043e\u0441\u043b\u0435 \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430."""\n        print(\'>> tearDownClass\')\n\n    def setUp(self):\n        """\u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0433\u043e\u043d\u0430 \u0442\u0435\u0441\u0442\u0430. \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0442\u0435\u0441\u0442\u043e\u043c."""\n        print(\'>>> setUp\')\n\n    def tearDown(self):\n        """\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430."""\n        print(\'>>> tearDown\')\n\n    def test_one(self): # \u044d\u0442\u043e -- test case \n        print(\'>>>> test_simple\')\n\n    def test_one_more(self): # \u044d\u0442\u043e -- \u0435\u0449\u0435 \u043e\u0434\u0438\u043d test case\n        print(\'>>>> test_simple\')\n\n\nif __name__ == \'__main__\':\n    unittest.main()\n')),(0,s.kt)("h2",{id:"\u043c\u0435\u0442\u043e\u0434\u0438\u043a\u0430-tdd"},"\u041c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 TDD"),(0,s.kt)("p",null,"\u041c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 TDD \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0442\u0435\u0441\u0442\u044b, \u0430 \u043f\u043e\u0442\u043e\u043c \u043a\u043e\u0434.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439 \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u043c."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'import unittest\n\n\'\'\'\u0412 \u043a\u043e\u0434\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043e\u043f\u0438\u0441\u0430\u043d \u043c\u0435\u0442\u043e\u0434 summ.\n\u0415\u0441\u043b\u0438 \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u0435\u0442\u043e\u0434 \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043e\u043d \u0432\u0435\u0440\u043d\u0451\u0442 \u043d\u043e\u043b\u044c, \u0430 \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u043c\u0435\u0442\u043e\u0434 summ \u043e\u0434\u0438\u043d \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u2014 \u043e\u043d \u0432\u0435\u0440\u043d\u0451\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430.\n\u042d\u0442\u043e \u043d\u0435 \u043b\u0443\u0447\u0448\u0435\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u043a\u0430\u043b\u044c\u043a\u0443\u043b\u044f\u0442\u043e\u0440\u0430, \u043d\u0430\u0434\u043e \u0435\u0433\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c. \u041c\u0435\u0442\u043e\u0434\u0438\u043a\u0430 TDD \u043f\u043e\u0434\u0440\u0430\u0437\u0443\u043c\u0435\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0438\u0448\u0443\u0442\u0441\u044f \u0442\u0435\u0441\u0442\u044b, \u0430 \u043f\u043e\u0442\u043e\u043c \u043a\u043e\u0434.\n\u0412 \u044d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0435\u0441\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442, \u0447\u0442\u043e summ \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 None, \u0435\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0435\u043d\u044c\u0448\u0435 \u0434\u0432\u0443\u0445.\'\'\'\nclass Calculator:\n    def summ(self, *args):\n        """\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0443\u043c\u043c\u0443 \u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432."""\n        sum = 0\n        if len(args) <= 1: #\u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043a\u043e\u043b-\u0432\u0430 \u043f\u043e\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432\n            return None\n        for i in args:\n            sum += i\n        return sum\n\n\nclass TestCalc(unittest.TestCase):\n    """\u0422\u0435\u0441\u0442\u0438\u0440\u0443\u0435\u043c Calculator."""\n    @classmethod\n    def setUpClass(cls):\n        """\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043e\u0434\u043d\u0430\u0436\u0434\u044b \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c \u0432\u0441\u0435\u0445 \u0442\u0435\u0441\u0442\u043e\u0432 \u043a\u043b\u0430\u0441\u0441\u0430."""\n        cls.calc = Calculator()\n\n    def test_summ(self):\n        act = TestCalc.calc.summ(3, -3, 5)\n        self.assertEqual(act, 5, \'summ \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043d\u0435\u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\')\n\n    \'\'\'\u0412 Unittest \u0435\u0441\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043d\u0430 None: assertIsNone(x)\n\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0435 \u0442\u0435\u0441\u0442\u044b \u2014 \u044d\u0442\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0445\u043e\u0440\u043e\u0448\u043e. \u041e\u0434\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u2014 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442:\ntest_summ_no_argument \u2014 \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0431\u0435\u0437 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432\ntest_summ_one_argument \u2014 \u0447\u0442\u043e \u0431\u0443\u0434\u0435\u0442, \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0441 \u043e\u0434\u043d\u0438\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c.\'\'\'\n\n    def test_summ_no_argument(self):\n        act = TestCalc.calc.summ()\n        self.assertIsNone(act)\n\n    def test_summ_one_argument(self):\n        act = TestCalc.calc.summ(1)\n        self.assertIsNone(act)\n')),(0,s.kt)("h2",{id:"mock"},"Mock"),(0,s.kt)("p",null,"\u041c\u043e\u043a\u0430\u0435\u043c ",(0,s.kt)("inlineCode",{parentName:"p"},"urllib.request")," \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0434\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 \u0442\u0435\u0441\u0442\u043a\u0435\u0439\u0441\u0430\u0445."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"import urllib.request\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestUrlopen(unittest.TestCase):\n    \n    @patch('urllib.request.urlopen')\n    def test_cm(self, mock_urlopen):\n        cm = MagicMock()\n        cm.getcode.return_value = 200\n        cm.read.return_value = 'contents'\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with urllib.request.urlopen('http://foo') as response:\n            self.assertEqual(response.getcode(), 200)\n            self.assertEqual(response.read(), 'contents')\n\n    @patch('urllib.request.urlopen')\n    def test_no_cm(self, mock_urlopen):\n        cm = MagicMock()\n        cm.getcode.return_value = 200\n        cm.read.return_value = 'contents'\n        mock_urlopen.return_value = cm\n\n        response = urllib.request.urlopen('http://foo')\n        self.assertEqual(response.getcode(), 200)\n        self.assertEqual(response.read(), 'contents')\n        response.close()\n\nif __name__ == '__main__':\n    unittest.main()\n")),(0,s.kt)("h3",{id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f-\u043f\u0430\u0442\u0447\u0435\u0439"},"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0442\u0447\u0435\u0439"),(0,s.kt)("p",null,"\u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u0434\u043c\u0435\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 ",(0,s.kt)("inlineCode",{parentName:"p"},"json")," \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0441\u044b\u043c\u0438\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-py"},"import io\nimport json\nimport urllib.request\nfrom unittest.mock import patch\n\n\ndef get_posts():\n    with urllib.request.urlopen('some url here') as data:\n        return json.load(data)\n\n\ndef test_get_posts():\n    data = io.StringIO('{\"id\": 123}')\n    with patch.object(urllib.request, 'urlopen', return_value=data):\n        assert get_posts() == {\"id\": 123}\n")),(0,s.kt)("h2",{id:"\u0441\u0441\u044b\u043b\u043a\u0438"},"\u0421\u0441\u044b\u043b\u043a\u0438"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/unittest.html"},"unittest")," - \u0432 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://docs.python.org/3/library/unittest.mock.html"},"unittest.mock")," -  \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 docs.python.org")))}m.isMDXComponent=!0}}]);