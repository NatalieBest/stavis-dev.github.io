"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9529],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),d=o,f=c["".concat(l,".").concat(d)]||c[d]||m[d]||s;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[c]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<s;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3146:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(4137));const s={title:"\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e unittest python",description:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e unittest \u0432 \u043f\u0438\u0442\u043e\u043d\u0435",sidebar_label:"Unittest \u043f\u0440\u0438\u043c\u0435\u0440\u044b",tags:["triks"],categories:["python"],last_update:{date:new Date("2023-06-20T00:00:00.000Z"),author:"stavis"}},a=void 0,i={unversionedId:"python/unittests",id:"python/unittests",title:"\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e unittest python",description:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e unittest \u0432 \u043f\u0438\u0442\u043e\u043d\u0435",source:"@site/docs/python/unittests.md",sourceDirName:"python",slug:"/python/unittests",permalink:"/python/unittests",draft:!1,editUrl:"https://github.com/stavis-dev/stavis-dev.github.io/tree/main/docs/python/unittests.md",tags:[{label:"triks",permalink:"/tags/triks"}],version:"current",lastUpdatedBy:"stavis",lastUpdatedAt:1687219200,formattedLastUpdatedAt:"20 \u0438\u044e\u043d. 2023 \u0433.",frontMatter:{title:"\u0428\u043f\u0430\u0440\u0433\u0430\u043b\u043a\u0430 \u043f\u043e unittest python",description:"\u041f\u0440\u0438\u043c\u0435\u0440\u044b \u043f\u043e unittest \u0432 \u043f\u0438\u0442\u043e\u043d\u0435",sidebar_label:"Unittest \u043f\u0440\u0438\u043c\u0435\u0440\u044b",tags:["triks"],categories:["python"],last_update:{date:"2023-06-20T00:00:00.000Z",author:"stavis"}},sidebar:"tutorialSidebar",previous:{title:"\u043c\u043e\u0434\u0443\u043b\u044c selenium python",permalink:"/python/selenium-python"},next:{title:"\u041c\u0430\u043d\u0443\u0430\u043b \u043f\u043e \u044f\u0437\u044b\u043a\u0443 Python",permalink:"/python/wiki-python"}},l={},u=[{value:"Mock",id:"mock",level:2},{value:"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0442\u0447\u0435\u0439",id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f-\u043f\u0430\u0442\u0447\u0435\u0439",level:3}],p={toc:u},c="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u042e\u043d\u0438\u0442\u0442\u0435\u0441\u0442\u044b \u0432 python \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0432\u0437\u044f\u0442\u044b\u0435 \u0441\u043e \u0432\u0441\u044f\u043a\u0438\u0445 \u0444\u043e\u0440\u0443\u043c\u043e\u0432."),(0,o.kt)("h2",{id:"mock"},"Mock"),(0,o.kt)("p",null,"\u041c\u043e\u043a\u0430\u0435\u043c ",(0,o.kt)("inlineCode",{parentName:"p"},"urllib.request")," \u043a\u043e\u0433\u0434\u0430 \u043d\u0430\u0434\u043e \u043f\u043e\u0434\u043c\u0435\u043d\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442\u044b \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432 \u0442\u0435\u0441\u0442\u043a\u0435\u0439\u0441\u0430\u0445."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import urllib.request\nimport unittest\nfrom unittest.mock import patch, MagicMock\n\nclass TestUrlopen(unittest.TestCase):\n    \n    @patch('urllib.request.urlopen')\n    def test_cm(self, mock_urlopen):\n        cm = MagicMock()\n        cm.getcode.return_value = 200\n        cm.read.return_value = 'contents'\n        cm.__enter__.return_value = cm\n        mock_urlopen.return_value = cm\n\n        with urllib.request.urlopen('http://foo') as response:\n            self.assertEqual(response.getcode(), 200)\n            self.assertEqual(response.read(), 'contents')\n\n    @patch('urllib.request.urlopen')\n    def test_no_cm(self, mock_urlopen):\n        cm = MagicMock()\n        cm.getcode.return_value = 200\n        cm.read.return_value = 'contents'\n        mock_urlopen.return_value = cm\n\n        response = urllib.request.urlopen('http://foo')\n        self.assertEqual(response.getcode(), 200)\n        self.assertEqual(response.read(), 'contents')\n        response.close()\n\nif __name__ == '__main__':\n    unittest.main()\n")),(0,o.kt)("h3",{id:"\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f-\u043f\u0430\u0442\u0447\u0435\u0439"},"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0430\u0442\u0447\u0435\u0439"),(0,o.kt)("p",null,"\u0415\u0441\u043b\u0438 \u043d\u0443\u0436\u043d\u0430 \u043f\u043e\u0434\u043c\u0435\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0441\u044b\u043c\u0438\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"import io\nimport json\nimport urllib.request\nfrom unittest.mock import patch\n\n\ndef get_posts():\n    with urllib.request.urlopen('some url here') as data:\n        return json.load(data)\n\n\ndef test_get_posts():\n    data = io.StringIO('{\"id\": 123}')\n    with patch.object(urllib.request, 'urlopen', return_value=data):\n        assert get_posts() == {\"id\": 123}\n")))}m.isMDXComponent=!0}}]);